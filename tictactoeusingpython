import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")
        self.board = [[" "]*3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X":0, "O":0, "Tie":0}
        self.create_widgets()
        # Emojis for X and O
        self.symbols = {"X":"❌", "O":"⭕"}

    def create_widgets(self):
        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        # Buttons
        for r in range(3):
            for c in range(3):
                btn = tk.Button(self.root, text=" ", width=6, height=3, font=("Arial", 24),
                                command=lambda row=r, col=c: self.player_move(row, col))
                btn.grid(row=r+1, column=c)
                self.buttons[r][c] = btn

        # Reset button
        self.btn_reset = tk.Button(self.root, text="Reset Game", command=self.reset_game)
        self.btn_reset.grid(row=4, column=0, columnspan=3, pady=10)

    def get_score_text(self):
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        if self.board[row][col] != " ":
            return
        self.board[row][col] = self.current_player
        self.buttons[row][col].config(text=self.symbols[self.current_player])
        threading.Thread(target=lambda: playsound('move.mp3')).start()

        if self.check_winner(self.current_player):
            self.highlight_winning_line(self.current_player)
            self.scores[self.current_player] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound('win.mp3')).start()
            self.root.after(1000, self.reset_board)
            return
        elif self.is_tie():
            self.scores["Tie"] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound('tie.mp3')).start()
            self.root.after(1000, self.reset_board)
            return

        # AI move
        if self.current_player == "X":
            self.current_player = self.ai_player
            self.root.after(500, self.ai_move)
            self.current_player = "X"

    def ai_move(self):
        empty = [(r, c) for r in range(3) for c in range(3) if self.board[r][c] == " "]
        if empty:
            r, c = empty[0]  # simple AI, first available
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.symbols[self.ai_player])
            threading.Thread(target=lambda: playsound('move.mp3')).start()
            if self.check_winner(self.ai_player):
                self.highlight_winning_line(self.ai_player)
                self.scores[self.ai_player] += 1
                self.update_scoreboard()
                threading.Thread(target=lambda: playsound('lose.mp3')).start()
                self.root.after(1000, self.reset_board)
            elif self.is_tie():
                self.scores["Tie"] += 1
                self.update_scoreboard()
                threading.Thread(target=lambda: playsound('tie.mp3')).start()
                self.root.after(1000, self.reset_board)

    def highlight_winning_line(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)):
                for j in range(3):
                    self.animate_button(self.buttons[i][j])
                return
            if all(self.board[j][i]==player for j in range(3)):
                for j in range(3):
                    self.animate_button(self.buttons[j][i])
                return
        if all(self.board[i][i]==player for i in range(3)):
            for i in range(3):
                self.animate_button(self.buttons[i][i])
            return
        if all(self.board[i][2-i]==player for i in range(3)):
            for i in range(3):
                self.animate_button(self.buttons[i][2-i])
            return

    def animate_button(self, btn, count=0):
        if count > 5:
            btn.config(bg="SystemButtonFace")
            return
        btn.config(bg="yellow" if count%2==0 else "red")
        self.root.after(200, lambda: self.animate_button(btn, count+1))

    def check_winner(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)) or all(self.board[j][i]==player for j in range(3)):
                return True
        if all(self.board[i][i]==player for i in range(3)) or all(self.board[i][2-i]==player for i in range(3)):
            return True
        return False

    def is_tie(self):
        return all(self.board[r][c]!=" " for r in range(3) for c in range(3))

    def reset_board(self):
        self.board = [[" "]*3 for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ", bg="SystemButtonFace")

    def reset_game(self):
        self.reset_board()
        self.scores = {"X":0, "O":0, "Tie":0}
        self.update_scoreboard()

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()

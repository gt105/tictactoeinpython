import tkinter as tk
from tkinter import messagebox
import random

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("ðŸŽ® Tic Tac Toe")
        self.board = [[" "]*3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X":0, "O":0, "Tie":0}
        self.create_widgets()

    def create_widgets(self):
        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        # Buttons
        for r in range(3):
            for c in range(3):
                btn = tk.Button(self.root, text=" ", width=6, height=3, font=("Arial", 24),
                                command=lambda row=r, col=c: self.player_move(row, col))
                btn.grid(row=r+1, column=c)
                self.buttons[r][c] = btn

        # Reset button
        self.btn_reset = tk.Button(self.root, text="Reset Game", command=self.reset_game)
        self.btn_reset.grid(row=4, column=0, columnspan=3, pady=10)

    def get_score_text(self):
        return f"Score â†’ X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        if self.board[row][col] != " ":
            return
        self.board[row][col] = self.current_player
        self.buttons[row][col].config(text=self.current_player)
        if self.check_winner(self.current_player):
            messagebox.showinfo("Game Over", f"ðŸŽ‰ Player {self.current_player} wins!")
            self.scores[self.current_player] += 1
            self.update_scoreboard()
            self.reset_board()
            return
        elif self.is_tie():
            messagebox.showinfo("Game Over", "It's a tie!")
            self.scores["Tie"] += 1
            self.update_scoreboard()
            self.reset_board()
            return

        # Switch to AI
        if self.current_player == "X":
            self.current_player = self.ai_player
            self.ai_move()
            self.current_player = "X"

    def ai_move(self):
        best_score = -float('inf')
        best_move = None
        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player
                    score = self.minimax(False)
                    self.board[r][c] = " "
                    if score > best_score:
                        best_score = score
                        best_move = (r, c)
        if best_move:
            r, c = best_move
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.ai_player)
            if self.check_winner(self.ai_player):
                messagebox.showinfo("Game Over", f"ðŸ’€ AI ({self.ai_player}) wins!")
                self.scores[self.ai_player] += 1
                self.update_scoreboard()
                self.reset_board()
            elif self.is_tie():
                messagebox.showinfo("Game Over", "It's a tie!")
                self.scores["Tie"] += 1
                self.update_scoreboard()
                self.reset_board()

    def minimax(self, is_maximizing):
        if self.check_winner(self.ai_player):
            return 1
        elif self.check_winner("X"):
            return -1
        elif self.is_tie():
            return 0

        if is_maximizing:
            best_score = -float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = self.ai_player
                        score = self.minimax(False)
                        self.board[r][c] = " "
                        best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = "X"
                        score = self.minimax(True)
                        self.board[r][c] = " "
                        best_score = min(score, best_score)
            return best_score

    def check_winner(self, player):
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)) or all(self.board[j][i] == player for j in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2-i] == player for i in range(3)):
            return True
        return False

    def is_tie(self):
        return all(self.board[r][c] != " " for r in range(3) for c in range(3))

    def reset_board(self):
        self.board = [[" "]*3 for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ")

    def reset_game(self):
        self.scores = {"X":0, "O":0, "Tie":0}
        self.update_scoreboard()
        self.reset_board()

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()

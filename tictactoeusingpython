
import tkinter as tk
from tkinter import messagebox
import random
=======

import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading


class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")
        self.board = [[" "]*3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X":0, "O":0, "Tie":0}
        self.create_widgets()

=======
        # Emojis for X and O
        self.symbols = {"X":"❌", "O":"⭕"}


    def create_widgets(self):
        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        # Buttons
        for r in range(3):
            for c in range(3):
                btn = tk.Button(self.root, text=" ", width=6, height=3, font=("Arial", 24),
                                command=lambda row=r, col=c: self.player_move(row, col))
                btn.grid(row=r+1, column=c)
                self.buttons[r][c] = btn

        # Reset button
        self.btn_reset = tk.Button(self.root, text="Reset Game", command=self.reset_game)
        self.btn_reset.grid(row=4, column=0, columnspan=3, pady=10)

    def get_score_text(self):
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        if self.board[row][col] != " ":
            return
        self.board[row][col] = self.current_player

        self.buttons[row][col].config(text=self.current_player)
        if self.check_winner(self.current_player):
            messagebox.showinfo("Game Over", f"🎉 Player {self.current_player} wins!")
            self.scores[self.current_player] += 1
            self.update_scoreboard()
            self.reset_board()
            return
        elif self.is_tie():
            messagebox.showinfo("Game Over", "It's a tie!")
            self.scores["Tie"] += 1
            self.update_scoreboard()
            self.reset_board()
            return

        # Switch to AI
        if self.current_player == "X":
            self.current_player = self.ai_player
            self.ai_move()
            self.current_player = "X"

    def ai_move(self):
        best_score = -float('inf')
        best_move = None
        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player
                    score = self.minimax(False)
                    self.board[r][c] = " "
                    if score > best_score:
                        best_score = score
                        best_move = (r, c)
        if best_move:
            r, c = best_move
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.ai_player)
            if self.check_winner(self.ai_player):
                messagebox.showinfo("Game Over", f"💀 AI ({self.ai_player}) wins!")
                self.scores[self.ai_player] += 1
                self.update_scoreboard()
                self.reset_board()
            elif self.is_tie():
                messagebox.showinfo("Game Over", "It's a tie!")
                self.scores["Tie"] += 1
                self.update_scoreboard()
                self.reset_board()

    def minimax(self, is_maximizing):
        if self.check_winner(self.ai_player):
            return 1
        elif self.check_winner("X"):
            return -1
        elif self.is_tie():
            return 0

        if is_maximizing:
            best_score = -float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = self.ai_player
                        score = self.minimax(False)
                        self.board[r][c] = " "
                        best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = "X"
                        score = self.minimax(True)
                        self.board[r][c] = " "
                        best_score = min(score, best_score)
            return best_score

    def check_winner(self, player):
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)) or all(self.board[j][i] == player for j in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2-i] == player for i in range(3)):
=======
        self.buttons[row][col].config(text=self.symbols[self.current_player])
        threading.Thread(target=lambda: playsound('move.mp3')).start()

        if self.check_winner(self.current_player):
            self.highlight_winning_line(self.current_player)
            self.scores[self.current_player] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound('win.mp3')).start()
            self.root.after(1000, self.reset_board)
            return
        elif self.is_tie():
            self.scores["Tie"] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound('tie.mp3')).start()
            self.root.after(1000, self.reset_board)
            return

        # AI move
        if self.current_player == "X":
            self.current_player = self.ai_player
            self.root.after(500, self.ai_move)
            self.current_player = "X"

    def ai_move(self):
        empty = [(r, c) for r in range(3) for c in range(3) if self.board[r][c] == " "]
        if empty:
            r, c = empty[0]  # simple AI, first available
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.symbols[self.ai_player])
            threading.Thread(target=lambda: playsound('move.mp3')).start()
            if self.check_winner(self.ai_player):
                self.highlight_winning_line(self.ai_player)
                self.scores[self.ai_player] += 1
                self.update_scoreboard()
                threading.Thread(target=lambda: playsound('lose.mp3')).start()
                self.root.after(1000, self.reset_board)
            elif self.is_tie():
                self.scores["Tie"] += 1
                self.update_scoreboard()
                threading.Thread(target=lambda: playsound('tie.mp3')).start()
                self.root.after(1000, self.reset_board)

    def highlight_winning_line(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)):
                for j in range(3):
                    self.animate_button(self.buttons[i][j])
                return
            if all(self.board[j][i]==player for j in range(3)):
                for j in range(3):
                    self.animate_button(self.buttons[j][i])
                return
        if all(self.board[i][i]==player for i in range(3)):
            for i in range(3):
                self.animate_button(self.buttons[i][i])
            return
        if all(self.board[i][2-i]==player for i in range(3)):
            for i in range(3):
                self.animate_button(self.buttons[i][2-i])
            return

    def animate_button(self, btn, count=0):
        if count > 5:
            btn.config(bg="SystemButtonFace")
            return
        btn.config(bg="yellow" if count%2==0 else "red")
        self.root.after(200, lambda: self.animate_button(btn, count+1))

    def check_winner(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)) or all(self.board[j][i]==player for j in range(3)):
                return True
        if all(self.board[i][i]==player for i in range(3)) or all(self.board[i][2-i]==player for i in range(3)):
 
            return True
        return False

    def is_tie(self):

        return all(self.board[r][c] != " " for r in range(3) for c in range(3))
=======
        return all(self.board[r][c]!=" " for r in range(3) for c in range(3))


    def reset_board(self):
        self.board = [[" "]*3 for _ in range(3)]
        for r in range(3):
            for c in range(3):

                self.buttons[r][c].config(text=" ")

    def reset_game(self):
        self.scores = {"X":0, "O":0, "Tie":0}
        self.update_scoreboard()
        self.reset_board()

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
=======
                self.buttons[r][c].config(text=" ", bg="SystemButtonFace")

    def reset_game(self):
        self.reset_board()
        self.scores = {"X":0, "O":0, "Tie":0}
        self.update_scoreboard()

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
=======

import random

def print_board(board):
    print("\nBoard:")
    for i, row in enumerate(board):
        print(f"{i} | {' | '.join(row)}")
        if i < 2:
            print("  " + "-"*9)
    print("    0   1   2\n")

def check_winner(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def player_move(board, player):
    while True:
        try:
            row = int(input(f"Player {player}, enter row (0-2): "))
            col = int(input(f"Player {player}, enter column (0-2): "))
        except ValueError:
            print("Enter valid numbers 0, 1, or 2.")
            continue
        if row not in range(3) or col not in range(3):
            print("Invalid position. Try again.")
            continue
        if board[row][col] != " ":
            print("Cell already taken. Choose another.")
            continue
        board[row][col] = player
        break

def ai_move(board, player, opponent):
    best_score = -float('inf')
    best_move = None
    for r in range(3):
        for c in range(3):
            if board[r][c] == " ":
                board[r][c] = player
                score = minimax(board, False, player, opponent)
                board[r][c] = " "
                if score > best_score:
                    best_score = score
                    best_move = (r, c)
    if best_move:
        board[best_move[0]][best_move[1]] = player
        print(f"AI ({player}) played at {best_move[0]}, {best_move[1]}")

def minimax(board, is_maximizing, player, opponent):
    if check_winner(board, player):
        return 1
    elif check_winner(board, opponent):
        return -1
    elif all(board[r][c] != " " for r in range(3) for c in range(3)):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for r in range(3):
            for c in range(3):
                if board[r][c] == " ":
                    board[r][c] = player
                    score = minimax(board, False, player, opponent)
                    board[r][c] = " "
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for r in range(3):
            for c in range(3):
                if board[r][c] == " ":
                    board[r][c] = opponent
                    score = minimax(board, True, player, opponent)
                    board[r][c] = " "
                    best_score = min(best_score, score)
        return best_score

def tic_tac_toe():
    print("Welcome to Tic Tac Toe!")
    score = {"X":0, "O":0, "Tie":0}
    mode = input("Select mode: 1 - Human vs Human, 2 - Human vs AI: ")

    while True:
        board = [[" "]*3 for _ in range(3)]
        players = ["X", "O"]
        turn = 0
        moves = 0

        while moves < 9:
            print_board(board)
            player = players[turn % 2]

            if mode == "2" and player == "O":
                ai_move(board, "O", "X")
            else:
                player_move(board, player)

            moves += 1

            if check_winner(board, player):
                print_board(board)
                print(f"🎉 Player {player} wins!")
                score[player] += 1
                break

            turn += 1
        else:
            print_board(board)
            print("It's a tie!")
            score["Tie"] += 1

        print(f"\nScore → X: {score['X']} | O: {score['O']} | Ties: {score['Tie']}")

        again = input("Play again? (y/n): ").lower()
        if again != "y":
            print("Thanks for playing!")
            break

if __name__ == "__main__":
    tic_tac_toe()
=======
import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")
        self.board = [[" "]*3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X":0, "O":0, "Tie":0}
        self.symbols = {"X":"❌", "O":"⭕"}
        self.create_widgets()

    def create_widgets(self):
        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        # Buttons
        for r in range(3):
            for c in range(3):
                btn = tk.Button(self.root, text=" ", width=6, height=3, font=("Arial", 24),
                                command=lambda row=r, col=c: self.player_move(row, col))
                btn.grid(row=r+1, column=c)
                self.buttons[r][c] = btn

        # Reset button
        self.btn_reset = tk.Button(self.root, text="Reset Game", command=self.reset_game)
        self.btn_reset.grid(row=4, column=0, columnspan=3, pady=10)

    def get_score_text(self):
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        if self.board[row][col] != " ":
            return
        self.board[row][col] = self.current_player
        self.buttons[row][col].config(text=self.symbols[self.current_player])
        threading.Thread(target=lambda: playsound('move.mp3')).start()

        if self.check_winner(self.current_player):
            self.scores[self.current_player] += 1
            self.update_scoreboard()
            self.highlight_winning_line(self.current_player)
            threading.Thread(target=lambda: playsound('win.mp3')).start()
            self.root.after(1000, self.reset_board)
            return
        elif self.is_tie():
            self.scores["Tie"] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound('tie.mp3')).start()
            self.root.after(1000, self.reset_board)
            return

        # AI Move
        self.current_player = self.ai_player
        self.root.after(500, self.ai_move)
        self.current_player = "X"

    def ai_move(self):
        best_score = -float('inf')
        best_move = None
        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player
                    score = self.minimax(False)
                    self.board[r][c] = " "
                    if score > best_score:
                        best_score = score
                        best_move = (r, c)

        if best_move:
            r, c = best_move
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.symbols[self.ai_player])
            threading.Thread(target=lambda: playsound('move.mp3')).start()
            if self.check_winner(self.ai_player):
                self.scores[self.ai_player] += 1
                self.update_scoreboard()
                self.highlight_winning_line(self.ai_player)
                threading.Thread(target=lambda: playsound('lose.mp3')).start()
                self.root.after(1000, self.reset_board)
            elif self.is_tie():
                self.scores["Tie"] += 1
                self.update_scoreboard()
                threading.Thread(target=lambda: playsound('tie.mp3')).start()
                self.root.after(1000, self.reset_board)

    def minimax(self, is_maximizing):
        if self.check_winner(self.ai_player):
            return 1
        elif self.check_winner("X"):
            return -1
        elif self.is_tie():
            return 0

        if is_maximizing:
            best_score = -float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = self.ai_player
                        score = self.minimax(False)
                        self.board[r][c] = " "
                        best_score = max(best_score, score)
            return best_score
        else:
            best_score = float('inf')
            for r in range(3):
                for c in range(3):
                    if self.board[r][c] == " ":
                        self.board[r][c] = "X"
                        score = self.minimax(True)
                        self.board[r][c] = " "
                        best_score = min(best_score, score)
            return best_score

    def check_winner(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)) or all(self.board[j][i]==player for j in range(3)):
                return True
        if all(self.board[i][i]==player for i in range(3)) or all(self.board[i][2-i]==player for i in range(3)):
            return True
        return False

    def is_tie(self):
        return all(self.board[r][c]!=" " for r in range(3) for c in range(3))

    def highlight_winning_line(self, player):
        for i in range(3):
            if all(self.board[i][j]==player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[i][j])
                return
            if all(self.board[j][i]==player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[j][i])
                return
        if all(self.board[i][i]==player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][i])
            return
        if all(self.board[i][2-i]==player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][2-i])
            return

    def animate_button(self, btn, count=0):
        if count > 5:
            btn.config(bg="SystemButtonFace")
            return
        btn.config(bg="yellow" if count%2==0 else "red")
        self.root.after(200, lambda: self.animate_button(btn, count+1))

    def reset_board(self):
        self.board = [[" "]*3 for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ", bg="SystemButtonFace")

    def reset_game(self):
        self.reset_board()
        self.scores = {"X":0, "O":0, "Tie":0}
        self.update_scoreboard()

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()





